Code for PIC
#define M11 PORTC.F4       // initialise port to rotate motor clockwise
#define M12 PORTC.F5      // initialise port to rotate motor anti clockwise

#define Relay_FAN PORTC.F2  // port to connect fan
#define Relay_LED PORTC.F3   // port to connect led strip
#define Relay_UART PORTC.F0   // port to connect GSM module

#define Eyeblink_Sensor PORTC.F1    // eye blink sensor port


unsigned char Step_Duration=50;
int Motion_X=0;        // setting x value to zero
int Bed_Inclination=0;   // declaring initial inclination as zero
int Sleep_Timer=0;

const *MsgPart_1 ="AT+CMGS=\"+14163194756\"/r/r";        //AT commands for GSM
const *MsgPart_2 = "Emergency.. Please help me\r\n" ;


const *LightON = "Light: ON ";
const *LightOFF = "Light: OFF ";

const *FANON = ", FAN: ON ";
const *FANOFF = ", FAN: OFF ";

const *BED = ", BED: ";

const *SLEEPINGYES = ", SLEEPING: YES ";
const *SLEEPINGNO = ", SLEEPING: NO ";


////--------------------------------------------------------
void Stop (void) {       // function to stop both motors
	M11=0;
	M12=0;
}


void Upward (void) {   //  function declaration to move the bed upwards
	M11=1;         //  Motor 1 is working during this time
	M12=0;
	Delay_Ms(50);
	M11=0;         // both motors are stopped
	M12=0;
}

void Downward (void) {  //  function declaration to move the bed downwards
	M11=0;
	M12=1;          //  Motor 1 is working during this time
	Delay_Ms(50);
	M11=0;        //  both motors are stopped
	M12=0;
}

char DelayCheck (int Count){
    char Stat=0;			// declaring the count of eye blink sensor
    Count=Count/50;
    while (Count--){
        Delay_Ms(50);
        if(Eyeblink_Sensor){		// checking the number of signal from IR sensor
        	Sleep_Timer=0;
            Stat++;
            while(Eyeblink_Sensor);
            Delay_Ms(50);
            if(Stat > 3)			//  loop work 4 times
            	break;
        }
    }
    return (Stat);
}

void Usart_Write_String (char *Stringg)    {
     while(*Stringg)
          Usart_Write(*Stringg++);
}

void Send_SOS (void) {   // function to send emergency message
   Relay_UART=1;
   Delay_Ms(200);
	 Usart_Write_String(&MsgPart_1);
	 Usart_Write_String(&MsgPart_2);
   Relay_UART=0;
}

void Send_Status_Wifi (void) {      // function for the working of Wi-Fi module
	if(Relay_LED)
		Usart_Write_String(&LightON);
	else
		Usart_Write_String(&LightOFF);


	if(Relay_FAN)
		Usart_Write_String(&FANON);
	else
		Usart_Write_String(&FANOFF);

    Usart_Write_String(&BED);
    Usart_Write((Bed_Inclination/10)+'0');
    Usart_Write((Bed_Inclination%10)+'0');

	if(Sleep_Timer > 45)
		Usart_Write_String(&SLEEPINGYES);
	else
		Usart_Write_String(&SLEEPINGNO);
}

//-----------------------------------------------------------------
void main(void) {
  TRISB = 0;                // PORTB is output
  Lcd_Init(&PORTB);         // Initialize LCD connected to PORTB
  Lcd_Cmd(Lcd_CLEAR);       // Clear display
  Lcd_Cmd(Lcd_CURSOR_OFF);  // Turn cursor off

	Usart_Init(9600);

  TRISC=0;      // port c set as output

  TRISC.F1=1;    	// RC1 set as input
	Stop ();	//calling stop function
   Relay_UART=0;

	Lcd_Out(1,0,"Smart Bed");		// to display smart bed
	Delay_Ms(1000);			// delay 1s

    while(1)  {
        while(1){
        	Motion_X=Adc_Read(0);		// initialising analog pins RA0,RA1,RA2

            if (Motion_X < 200){			// checking the x value ,below 200 or not
            	if(DelayCheck(3000))		// if it is below 200 calling delaycheck function 
                    break;
            }

            Send_Status_Wifi();    
            Sleep_Timer++;
            Delay_Ms(1000);
        }

        Lcd_Cmd(Lcd_CLEAR);       // Clear display
    	  Lcd_Out(1,0,"Activated");
        Delay_Ms(1000);



        Lcd_Cmd(Lcd_CLEAR);       // Clear display
        Lcd_Out(1,0,"SEND SOS");

        if(DelayCheck(2000)){		// 2 second delay
    		Send_SOS();
            Lcd_Cmd(Lcd_CLEAR);       // Clear display
            Delay_Ms(1000);
        }


        Lcd_Cmd(Lcd_CLEAR);       // Clear display
        Lcd_Out(1,0,"BED UP");	// displays bed up

        if(DelayCheck(2000)){		// 2 second delay
        	if(Bed_Inclination <60) {		// checking current position of bed
          			Upward();		// calling upward function
          			Bed_Inclination=Bed_Inclination+10;//updating the bed inclination value
                Lcd_Cmd(Lcd_CLEAR);       // Clear display
                Lcd_Out(1,0,"Done");
                Delay_Ms(1000);
        	}
        }

        Lcd_Cmd(Lcd_CLEAR);       // Clear display
        Lcd_Out(1,0,"BED DOWN");

        if(DelayCheck(2000)){
        	if(Bed_Inclination >9) {
    			Downward();	// calling downward function
    			Bed_Inclination=Bed_Inclination-10;
                Lcd_Cmd(Lcd_CLEAR);       // Clear display
                Delay_Ms(1000);
        	}
        }


        Lcd_Cmd(Lcd_CLEAR);       // Clear display
        Lcd_Out(1,0,"FAN ON/OFF");

        if(  DelayCheck(2000)  ) {
        	Relay_FAN=!Relay_FAN;	// sending signal to do the opposite function
            Lcd_Cmd(Lcd_CLEAR);       // Clear display
            Delay_Ms(1000);
        }

        Lcd_Cmd(Lcd_CLEAR);       // Clear display
        Lcd_Out(1,0,"LIGHT ON/OFF");

        if(  DelayCheck(2000)  ) {
        	Relay_LED=!Relay_LED;
            Lcd_Cmd(Lcd_CLEAR);       // Clear display
            Delay_Ms(1000);
        }
    }
}
